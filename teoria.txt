COMPILAZIONE ED ESECUZIONE DA CMD
compilazione java:
    javac Esempio1.java       (produce Esempio1.class)
poi per farlo partire:
    java Esempio1 (args)

per distribuire i programmi, java utilizza il tipo .jar che è un file compresso ZIP che contiene al suo
interno tutto il programma (essendo diviso in classi andava trovato un altro modo)

per creare un file .jar come archivio di classi (zip):
    jar cf nomearchivio.jar classi -> è un elenco di classi da scrivere oppure un'intera da cartella.
                                      vanno separate tutte da ;
    ESEMPIO:
    jar cf nomeCheScelgoIo.jar *.class;pippo/*.class -> andrà a creare nomeCheScelgoIo.jar con le classi
                                                        .class che ho incluso

per creare un file .jar eseguibile:
    jar cmf info.txt nomeapp.jar classi -> classi esattamente come prima
    info.txt è un file che contiene la riga:
        Main-Class: NomeclasseMain -> seguita da una riga vuota INDISPENSABILE


ISTANZE
Sono le "variabili principali" della classe che vengono dichiarate all'inizio e assegnate nel costruttore

VARIABILI STATICHE
Sono dichiarate all'inizio della classe e gli viene dato un valore, possono essere modificate

METODI STATICI E NON STATICI
Metoci statici: non fanno uso di istanze e possono essere chiamati solo nella classe
Metodi non statici: richiedono di essere associati ad un istanza

FINAL
Variabili final: costanti inmodificabili che devono essere inizializzate
Metodi final: non possono essere sovrascritti da sottoclassi
Classi final: non può essere estesa, non può essere usata come superclasse

TIPI PRIMITIVI
per conversione di tipi primitivi in java si usa il CAST:
    float f = (float) 3.54;     oppure     float f = 3.54F; -> ques'ultimo non è cast ma direttamente
                                                               l'input giusto

per convertire si usano per esempio:
float f= 3.14F; 
int i=f.intValue(); //i vale 3

i caratteri in java ovviamente non seguono più la tabella ASCII che ha pochissimi caratteri,
ma UTF-8, UTF-16 e UTF-32


TOSTRING TIPS
Esempio STRINGJOINER:
public String toString() {
		StringJoiner res = new StringJoiner(",");
		for (PioloDiGioco piolo : combinazione) {
			res.add(piolo.toString());
		}
		return res.toString();
	}
}
Spegaz:
Crea StringJoiner res per unire le parole dividendole con ",".
Sceglie le parole col ForEach (for(Tipo puppa : insiemeDiPuppe) significa "per ogni puppa nell'insieme di puppe").
Le aggiunge allo StringJoiner con add.
Ritorna lo StringJoiner.toString() per renderlo una stringa vera e propria.

Esempio STINGBUILDER:
public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("[");
		for (int i = 0; i < size(); ++i) {
			sb.append(get(i).toString());
			if (i < size() - 1)
				sb.append(", ");
		}
		sb.append("]");
		return sb.toString();
	}
Non ho voglia di spiegarlo si commenta da solo.
Molto simile a StringJoiner, questo ti da tanti bei comandi (come append) per fare stringhe belline ez clapped.
Ricorda il toString al return.

ENUMERATIVI
sono semplicemente alias final per costanti int
per esempio:

public enum Direction {
        NORTH, SOUTH, EAST, WEST;
}

NORTH=0, SOUTH=1 ecc...

per assegnarli si usa:
Direction dir = Direction.NORTH;

Metodi:
-Direction.values() fornisce i valori su cui iterare
-Direction.valueOf() converte una stringa nel corrispondente
oggetto dell'enumerativo
-d.ordinal() restituisce il valore intero dell'enum
esempio:

for (Direction d : Direction.values())
        System.out.println( d.ordinal() );
System.out.println(Direction.valueOf("EAST"));

->OUTPUT: 0 1 2 3 EAST

E per dare valori aggiuntivi all'enum? si fa cosi: 

public enum Direction {
        NORTH("Nord", 0), SOUTH("Sud", 180),
        EAST("Est", 90), WEST("Ovest", 270);
        
        private String value;
        private int degrees;
        
        private Direction(String value, int degrees) {
                this.value = value; this.degrees = degrees;
        }
}



DATE
Per tutte le cose che hanno a che fare con il tempo si importa la libreria java.time.*

Questa libreria non utilizza il termine 'new', ma ha un costruttore proprio che è '.of'.
Per esempio si scrive:
    LocalDate natale = LocalDate.of(2020, 12, 25);
Oppure per mesi e giorni della settimana (ENUM) si scrive:
    Month mese = Month.of(10) --> OCTOBER
    DayOfWeek giorno = DayOfWeek.of(2) --> TUESDAY
Oppure per orari locali:
    LocalTime mezzogiorno = LocalTime.of(12, 00)

I vari concetti sono:
    locali:
        LocalDate
        LocalTime
        LocalDateTime
        Period --> durata relativa
    assoluti:
        Instant
        Duration
        OffsetDateTime --> data assoluta sulla linea del tempo espressa come data + orario + delta rispetto a Greenwich (UTC)
        ZonedDateTime --> data assoluta sulla linea del tempo espressa come data + orario + delta rispetto a Greenwich (UTC)

GIORNI E MESI
I due enumerativi per giorni e mesi:
    Month
    DayOfWeek
Entrambi hanno un getValue che dall'enum restituiscono il numero:
    Month.OCTOBER.getValue() --> 10
    DayOfWeek.MONDAY.getValue() --> 1
Oppure hanno la funzione '.of' che restituisce la costante enumerativa del numero (il contrario di prima):
    Month.of(10) --> OCTOBER
    DayOfWeek.of(1) --> MONDAY

DATE E ORARI LOCALI
    da struttura LocalDate posso ottenere i vari valori con:
        getDayOfMonth
        getMonth
        getYear
        getDayOfYear
        getDayOfWeek
        isLeapYear
        ...
    da struttura LocalTime posso utilizzare invece:
        getHour
        getMinute
        getSecond
        getNano
Posso aggiungere, sottrarre o modificare alcuni parametri con:
    per LocalDate:
        plus*:
            natale2020.plusYears(4) --> natale2024
        minus*:
            allo stesso modo
        with*:
            natale2020.withYear(2018) --> natale2018
    per LocalTime:
        stessa roba

PERIOD
Un periodo che non è però di un "luogo temporale specifico".
Posso dire infatti un periodo di un mese, ma non tutti i mesi hanno la stessa durata, quindi
fa comodo non sapere di che mese si stia parlando.

Anche in questo caso ci sono il costruttore '.of' e le varie funzioni plus, minus, between, ...
    Period p1 = Period.ofMonths(2).plusDays(3)

Per unire Period alle varie date locali o assolute, ci sono funzioni come:
    addTo:
        LocalDate d1 = (LocalDate)p1.addTo(xmas2017); --> OCCHIO AL CAST
    substractFrom:
        stessa roba

INSTANT
Praticamente inutile, ha il suo costruttore e può essere utile perché disconnesso da calendari specifici
per cultura.

Esempio per istante attuale:
    Instant adesso = Instant.now();

DURATION
La durata di tempo tra due istanti
    Duration d = Duration.between(i1,i2)

Come sempre c'è il '.of' e i vari plus, minus, with e between.

Ci sono anche metodi che possono convertire durate in anni, mesi giorni, ore, minuti, ... --> TRONCAMENTO

ORARI E DATE ASSOLUTE
guarda diapositive da 27 ppt Date



FORMATTATORI
Non in tutte le culture vengono formattati i dati in modo uguale. Java offre dei formattatori a seconda delle varie culture in alcuni database.
La libreria che rappresenta il concetto di culura locale è java.util.Locale
Ogni cultura è rappresentata con lingua con 2 minuscole e paese con due maiuscole.
	it_IT oppure en_GB
Se non si specifica nulla i formattatori adottano il default della macchina che si può vedere attraverso 'Locale.getDefault'

Esistono due grandi famiglie di formattatori:
	formattatori NUMERICI (java.text.NumberFormat)
		formattazione di numeri
		formattazione di percentuali
		formattazione di prezzi e valori di valute

		formatter.format(valore) --> il formattatore è dichiarato in NumberFormat

	formattatori per DATE e ORARI (java.time.format.DateTimeFormatter)
		formattazione di data (in 4 formati: breve, medio, lungo e full)
		formattazione di orario (in 2 formati: breve e medio)
		formattazione di una data con orario (4 x 2 formati)

		valore.format(formatter) --> il formattatore è dichiarato in LocalDate

FORMATTATORI NUMERICI
Nella classe NumberFormat ci sono 3 metodi get che fungono da factory
	Esempio:
		double x = 43.12345678, y = 0.7, z = 13456.78;
		NumberFormat fN = NumberFormat.getNumberInstance();
		NumberFormat fP = NumberFormat.getPercentInstance();
		NumberFormat fV = NumberFormat.getCurrencyInstance(Locale.ITALY); -> se non metto il Locale prende quello di default
		
		fN.setMaximumFractionDigits(2); --> configurazione
		System.out.println( fN.format(x) ); --> 43,12
		System.out.println( fN.format(y) ); --> 0,7
		System.out.println( fN.format(z) ); --> 13.456,78
		
		fP.setMaximumFractionDigits(2);
		System.out.println( fP.format(x) ); --> 43,12%
		System.out.println( fP.format(y) ); --> 70%
		System.out.println( fP.format(z) ); --> 123,46%

		System.out.println( fV.format(z) ); --> 1.243,57 € (fino a Java 8 il simbolo dell'euro era prima del valore, quindi occhio a retrocompatibilità)

	PARSING
	Per effettuare il parsing utilizzando i formattatori numerici, innanzitutto va creato il formattatore, per esempio:
		NumberFormat formatter = NumberFormat.getInstance();
	poi si usa il metodo '.parse', gestendo le varie eccezioni ParseException.
		Number number = decimalFormat.parse("1,234.56");
	Ovviamente poi va convertito il Number che viene restituito dal metodo .parse in int, float o double.

FORMATTATORI PERSONALIZZATI PER SOLDI O PERCENTUALI
Per formattatori personalizzati devo usare un 'DecimalFormat', per esempio se volessi mettere il simbolo dell'euro prima della cifra:
	DecimalFormat formatter = new DecimalFormat("¤\u00A0#,##0.00"); -> posso anche scrivere NumberFormat = new Decimal...
		il simbolo '¤' è il sibolo di valuta
		'\u00A' è lo spazio hard
		'#,##0,00' indica il . come spazio tra le migliaia (ogni 3 cifre), i # come cifre facoltative e gli 0 come cifre che se non sono presenti vengono comunque messi degli 0 (controllalo che anche nelle slide
			la virgola era invertita con il punto)
	e se voglio anche i numeri negativi in modo particolare devo specificarlo:
	var f = new DecimalFormat("¤ #,##0.00;¤ -#,##0.00");

FORMATTATORI PER DATE E ORARI
I metodi factory sono di nuovo gli 'of**(...)'. Invertono il pattern d'uso: dataora.format(formatter).
Ci sono 4 formati di stile per le date:
	SHORT: gg/mm/aa
	MEDIUM: gg siglamese aaaa
	LONG: gg mese aaaa
	FULL giorno gg mese aaaa
	
	Esempio:
		DateTimeFormatter formatterShort = DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT);
		DateTimeFormatter formatterMedium = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);
		DateTimeFormatter formatterLong = DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG);
		DateTimeFormatter formatterFull = DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL);
		LocalDate d = LocalDate.now();
		System.out.println(d.format(formatterShort)); --> 04/03/20
		System.out.println(d.format(formatterMedium)); --> 4 mar 2020
		System.out.println(d.format(formatterLong)); --> 4 marzo 2020
		System.out.println(d.format(formatterFull)); --> mercoledì 4 marzo 2020

Sennò formattatori personalizzati con il metodo factory 'ofPattern':
	Esempio:
		DateTimeFormatter myFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
		LocalDate d = LocalDate.now();
		System.out.println(d.format(myFormatter)); --> 04/03/2020

Il Locale se non vogliamo quello default viene passato con il metodo 'withLocale(Locale.*)'
	Esempio:
		DateTimeFormatter.ofLocalizedDate(…).withLocale(Locale.CANADA)

I formattatori per gli orari sono uguali a quelli per le date ma hanno solo due formati:
	SHORT: hh:mm
	MEDIUM: hh:mm:ss

	Esempio:
		DateTimeFormatter formatterShort = DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT);
		DateTimeFormatter formatterMedium = DateTimeFormatter.ofLocalizedTime(FormatStyle.MEDIUM);
		LocalTime t = LocalTime.now();
		System.out.println(t.format(formatterShort)); --> 18:37
		System.out.println(t.format(formatterMedium)); --> 18:37:41

Per formattatori che vogliono sia le date che l'orario si usa il metodo '.ofLocalizedDateTime(dateStyle, timeStyle)'.

	PARSING
	Anche questi formattatori possono essere utilizzati per fare parsing, infatti creando il formattatore, poi con il metodo '.parse' (che prende in
	input il formattatore) posso prendere la data. Esempio:
		LocalDate date = LocalDate.parse("12/06/2024", formatter);
	oppure
		LocalTime time = LocalTime.parse("14:30:15", formatter);
	Entrambi lanciano DateTimeParseException.


EREDITARIETA'
le superclassi sono le classi con i metodi base di sottoclassi piu complesse e meno generiche, 
si usa la gerarchia per non dover creare classi simili molteplici volte

-public class superclasse{

-public class sottoclasse extends superclasse{

per richiamare i metodi della superclasse nella sottoclasse si usa super.metodo(..), 
per il costruttore super(..), 
per i campi super.campo

nuovo tipo di copertura via di mezzo tra public e private:
"protected"=permette l'accesso alla classe stessa e le sottoclassi e ha simbolo #

se si crea un metodo nella sottoclasse con nome analogo ad un metodo già 
presente nella superclasse si mette @Override


POLIMORFISMO
polimorfismo verticale: perchè si sale escende nella gerarghia
la sostanza prevale sulla forma.
un metodo polimorfo è in grado di adattare il suo comportamento allo specifico oggetto.
il tipo "object" è il supertipo riferimento capostitipe, ogni classe sottintende "extends object"


EQUALS
posso assegnere un tipo ad object per esempio:
Frazione f= new Frazione(..);
Object obj= f;
e metterlo dentro ad una equals che richiede object come signature

public boolean equals(object obj){
        //all'interno di equals se voglio riferirmi ad obj come fosse una Frazione dovrò scrivere:
        Frazione that = (Frazione)obj;
        return (this.num*that.den == this.den*that.num); 
}

però così non controlliamo se obj è effettivamente una Frazione e lo diamo per scontato
possiamo quindi inserire un operatore instanceof che controlli:

public boolean equals(Object obj){
        if (obj instanceof Counter)
	return this.value==((Counter)obj).value;
        else return false;
}

ANZI possiamo anche convertirlo direttamente insieme al controllo:

public boolean equals(Object obj){
        if (obj instanceof Counter that)
	return this.value==that.value;
        else return false;
}


HASHCODE
restituisce il valore hash di un oggetto sottoforma di int.
Importante ricordare che:
	-due oggetti uguali (equals true) in equalsh hanno SICURAMENTE lo stesso valore hash
	-due oggetti diversi (equals false) POSSONO avere lo stesso valore hash



WRAPPER PER TIPI PRIMITIVI
In Java i tipi base/primitivi (boolean, char, int ecc.) non sono classi e quindi i loro valori non sono Object
Sono Object invece cose come String, Counter(), Frazione()...
Quindi non posso inserie un tipo base dove ci vuole un object e viceversa.

//quello scritto qua sotto viene tuttavia fatto da java in automatico

Per ovviare a questo problema ci sono le "classi wrapper" che incaplsulano i valori primitivi.
Solitamente sono omonime (o quasi) al tipo che incapsulano:
– classe Integer per incapsulare il tipo primitivo int
– classe Character per incapsulare il tipo primitivo char
– classe Long per incapsulare il tipo primitivo long
– classe Float per incapsulare il tipo primitivo float
– classe Double per incapsulare il tipo primitivo double
ecc..

Per incapsulare (BOXING) si utilizza .valueOf(..):
Integer i = Integer.valueOf(22);
Double d = Double.valueOf(3.14);

Per estrarre il valore (UNBOXING) si usa il metodo di estrazione:
int x = i.intValue(); // x vale 22
double z = d.doubleValue(); // z vale 3.14

//un po di cultura comunque non fa male



RECORD

record ===> contenitori di valori.

Sono final, non sono class, non possono essere ne astratti ne estesi e si inizializzano così:
public record Puppa(int numero, String nome) {}

utili perché il compilatore crea in automatico il costruttore e i get. Per esempio posso usare nel caso precedente getNumero() o getNome() senza scriverlo io manualmente.

Posso anche aggiungere dei metodi personalizzati ma ATTENZIONE: i valori dei record sono IMMUTABILI, quindi non posso creare un metodo così:
record Puppa(int numero, String nome) {
	public void setNumero(int nuovoNumero) {
		this.numero = nuovoNumero;
	}
}

Il compilatore darebbe errore, non posso cambiare il valore dei dati, l'unica cosa che posso fare è creare un nuovo record che restituisco, ma è un record diverso

record Puppa(int numero, String nome) {
	public Puppa setNumero(int nuovoNumero) {
		return new Puppa(nuovoNumero, nome);
	}
}

Utile però per avere vari metodi get che ritornano magari valori modificati dei dati presenti all'interno.





CLASSI ASTRATTE

classi che possono avere dei metodi astratti che non vengono inizialmente implementati o vengono implementati con un metodo di default poiché
ogni SOTTOCLASSE avrà il suo specifico.

le classi astratte si creano così:

public class abstract Puppa {
	private int numero = 0;
	private String nome = null;

	public Puppa(int numero, String nome) {
		this.numero = numero;
		this.nome = nome;
	}

	public void metodo1() {
		bla;
		bla;
	}

	public void metodoAstratto();

	public void metodoAstratto2() {
		bla;
		bla;
		implementazione default, poi in ogni sottoclasse ci sarà un metodo chiamato nello stesso modo con @Override prima e il compilatore nel caso in cui esista;
		utilizzerà quello;
	}
}

Ogni sottoclasse dorvà essere creata specificando che estende la classe astratta, per esempio:

public class DaiCheAndiamo extends Puppa{
    private String sesso;

    public DaiCheAndiamo(int numero, String nome, String sesso) {
        super(numero, nome);
        this.sesso = sesso;
    }

    @Override
    public void metodoAstratto() {
        bla; bla;
    }

    @Override
    public void metodoAstratto2() {
        bla; bla;
    }
}

La sottoclasse DEVE avere un costruttore che inizializza tutti i dati, per inizializzare i dati della classe astratta al di sopra si utilizza la funzione super()
con i dati all'interno che indica che richiama il costruttore della classe astratta e inserisce i dati all'interno di essa.




INTERFACCE

E' una classe astratta posta all'estremo, le sottoclassi non stanno più sotto, l'interfaccia è solo una definizione che ha all'interno dei metodi pubblici
e costanti. Non può neanche avere al suo interno delle variabili, la cosa migliore che può fare è andare a definire dei metodi che ritornano delle
variabili e poi ogni sottoclasse andrà ad implementare a modo suo il codice per restituire la variabile desiderata. Per esempio se ho un'interfaccia
chiamata 'rettangolo' con i metodi 'base()' ed 'altezza()' ed una classe 'quadrato' che vuole implementare l'interfaccia 'rettangolo' (perché
effettivamente è un rettangolo particolare) dovrà andare a specificare nel suo codice i metodi base e altezza andando a prendere i dati dalla variabile
'lato', non per forza da base e altezza. Tutto questo per spiegare che posso avere delle "variabili" anche dalle interfacce.

Una classe se vuole implementare in sé l'interfaccia, deve andare ad implementare ogni metodo descritto dall'interfaccia.

Un'interfaccia si dichiara così:
	public interface Rettangolo;

Una classe, se vuole implementare un'interfaccia, scrive:
	(public) class Quadrato implements Rettangolo;
	    |
	    -> non necessariamente pubblica

Esempio: 

public interface Filter {
	
	public boolean filter(Media media);
	
}

implementata:

public class TypeFilter implements Filter {

	private Type typeToFind;
	
	public TypeFilter(Type typeToFind) {...

	public void setType(Type typeToFind) {...
	
	@Override
	public boolean filter(Media media) {
		if (media instanceof HasType m) {
			return (m.getType().equals(typeToFind));
		}
		return false;
	}

}



LISTE IN JAVA
package edutils;

public class List {
	private Object elem;
	private List next;

	public List(){ elem=null; next=null;}
	public List(Object e){ elem=e; next=null; }
	public List(Object e, List l){ elem=e; next=l; }

	public Object head(){ return elem; }
	public List tail(){ return next; }

	public boolean isEmpty(){ return elem==null; }

	public String toString(){ return isEmpty()? "" :
		elem.toString() +
		(next==null ? "" : ", " + next.toString()); }
}

List l1 = new list();



GENERICITA' E CONTROLLO DI TIPO PER ARRAY

Chiamare ogni array generico con Object, può andare a creare moltissimi problemi, poiché posso andare a metterci dentro quello che voglio, anche di tipi
diversi tra di loro. E' sempre meglio avere degli array di un tipo specifico, ma poi come faccio a fare delle funzioni che possono agire sugli array in
generale? Per esempio la funzione 'idem' che analizza due array di un tipo qualsiasi e controllano che siano uguali. Se li chiamo Object in input della
funzione potrei mandarci degli array con tipi diversi, con all'interno cose a caso, insomma non si fa.
Per risolvere questo problema c'è l'utilizzo del polimorfismo orizzontale:

per creare le varie funzioni si scrive:
	public static <T> boolean idem(T[] a, T[] b);

invece per la chiamata della funzione si scrive:
	nomeClasse.<NomeDelTipoDiCuiSonoFattiGliArray>idem(array1, array2);

Insomma è meglio del resto

POLIMORFISMO ORIZZONTALE
Introduce il tipo dell'Object come parametro


TODO APPUNTI DELLE FACTORY DELLE INTERFACCE

In java ci sono anche delle interfacce di default che servono al compilatore per capire se può eseguire determinate azioni (se ha una certa capacità).
Per esempio esiste l'interfaccia tipizzata 'Comparable<T>' che indica se un oggetto è comparabile con un altro oggetto dello stesso tipo e implica la
creazione del metodo 'public int compareTo(T that):

Per esempio se voglio creare un comparatore per Counter, dovrò scrivere
	public class MyComparatore implements Comparator<Counter> {
		public int compareTo(Counter that){
			if (val < that.val) return -1;
			if (val > that.val) return +1;
			return 0;
		}
	}

Questo metodo serve al compilatore per eseguire moltissime azioni, ma le più importanti sono
	ORDINEMENTO
	- l'ordinamento di un array attraverso il metodo statico 'Arrays.sort'
	- l'ordinamento di una lista attraverso il metodo 'Collections.sort'
	RICERCA
	- ricerca binaria all'interno di un array attraverso il metodo statico 'Arrays.binarySearch'
	- ricerca binaria all'interno di una lista attraverso il metodo 'Collections.binarySearch'

In particolare per la comparazione all'interno del metodo statico .sort, il compilatore va a richiamare il metodo compareTo che ritorna un intero ed indica
se i due dati comparati sono uno maggiore dell'altro.
Ma questo semplice metodo non cattura ogni casistica, ci sta che a volte io voglia confrontare un campo specifico e altre volte un altro.
Per esempio se voglio confrontare più persone posso confrontarle per età, nome, cognome, ecc... ed un comparatore singolo non è abbastanza.

Per questo si introduce il concetto di COMPARATORE.
A differenza dell'interfaccia comparable, è un ente terzo che compara due oggetti, non è un metodo all'interno della classe.
In java si dichiara:
	Comparator<T>
e dichiara al suo interno un singolo metodo:
	public int compare(T a, T b);
che restituisce 1 se a > b, -1 se a < b e 0 se a == b.

Per esempio se voglio creare un comparatore per Counter, dovrò scrivere
	public class MyComparatore implements Comparator<Counter> {
		public int compare(Counter x, Counter y){
			if (x.val < y.val) return -1;
			if (x.val > y.val) return +1;
			return 0;
		}
	}

Se volessi invece creare metodi diversi per comparare degli oggetti, mi basta creare più classi comparatore con all'interno il proprio metodo compare
e in Arrays.sort passo oltre all'array anche il comparatore che voglio utilizzare, per esempio:

	Arrays.sort(persone, new CognomeComparator() );
	System.out.println(String.join(", ", persone));
	Arrays.sort(persone, new NomeComparator() );
	System.out.println(String.join(", ", persone));
	Arrays.sort(persone, new EtaComparator() );
	System.out.println(String.join(", ", persone));

Se il comparatore viene usato una sola volta, posso andare a creare una classe anonima, cioè direttamente all'interno dell'Arrays.sort scrivo il codice
e l'implementazione della classe del comparatore con il metodo compare all'interno. Per esempio:

	Arrays.sort(persone, new Comparator<Persona>() {
		public int compare(Persona p1, Persona p2){
		return p1.getCognome().compareTo(p2.getCognome());
		}
	);


Infine ci sono le interfacce MARKER, cioè interfacce senza all'interno alcun tipo di codice, ma che servono per comunque definire un tipo ad ogni classe,
per andare ad aiutare il compilatore a scovare eventuali errori di incongruenza di tipo.

Posso quindi andare a scrivere in seguito dei metodi che accettano solo delle classi di un certo tipo, che rappresentano tutte le classi che implementano
questa interfaccia marker. Per esempio posso andare a creare un'interfaccia chiamata "StampabiliInUnaSolaRiga" che indicano tutte le classi che nel mio
ipotetico programma possono essere stampate in una sola riga e quindi posso andare a creare un metodo statico chiamato "stampaRigaSingola" che accetta solo
istanze dell'interfaccia "StampabiliInUnaSolaRiga".

	public static void stampaRigaSingola(StampabiliInUnaSolaRiga stringa) {
		System.out.println(stringa);
	}

e questo fa si che ogni classe che non implementa questa classe marker che prova ad utilizzare questo metodo vada a creare errore ed il programma non
compila.

TODO APPUNTI DELLE INTERFACCE UNITE AGLI ENUMERATIVI




GENERICITA' E CONTROLLO DI TIPO PER ARRAY

Chiamare ogni array generico con Object, può andare a creare moltissimi problemi, poiché posso andare a metterci dentro quello che voglio, anche di tipi
diversi tra di loro. E' sempre meglio avere degli array di un tipo specifico, ma poi come faccio a fare delle funzioni che possono agire sugli array in
generale? Per esempio la funzione 'idem' che analizza due array di un tipo qualsiasi e controllano che siano uguali. Se li chiamo Object in input della
funzione potrei mandarci degli array con tipi diversi, con all'interno cose a caso, insomma non si fa.
Per risolvere questo problema c'è l'utilizzo del polimorfismo orizzontale:

per le varie funzioni si scrive:
	public static <T> boolean idem(T[] a, T[] b);

invece per la chiamata della funzione si scrive:
	<NomeDelTipoDiCuiSonoFattiGliArray>idem(array1, array2);

Insomma è meglio del resto



NULL SAFETY (OPTIONAL)

Semplicemente è brutto e non si usa il null perché porta a null pointer exeption con errori introvabili, difficili da debuggare e che si propagano velocemente in tutto
il codice rendendolo difficilmente mantenibile

Un caso da cui prendere spunto come ottima alternativa al null è il NaN che anche se non è un numero, almeno restituisce qualcosa e segue tutte le regole matematiche
del caso successivamente nel codice. NaN fa parte della classe libreria Float e Double, e si dichiara Float.NaN o Double.NaN.

Non esiste però una cosa simile per gli oggetti (nei numeri funziona solo perché non sono oggetti).

Java quindi agisce a livello di libreria andando a creare il concetto di tipo "Optional<T>". Questo tipo esprime l'idea che un oggetto possa mancare, infatti è opzionale.
Viene quindi creato un tipo che in ogni caso restituisce qualcosa. Quindi l'oggetto di tipo T che ci interessa viene restituito incapsulato all'interno
dell'oggetto-wrapper ausiliario 'optional'. Questo esiste sempre, non è mai null.

I vari metodi dell'optional sono:
	– per incapsulare un valore: Optional.of
		(c'è anche il metodo ofNullable che scrive da solo empty se l'elemento è null)
	– per esprimere il "nessun valore": Optional.empty
	– per accertare la presenza/assenza: isPresent / isEmpty
	– per estrarre il valore (se presente): get / orElse (scrivi x.orElse(y) e se x non è presente restituisce y senza if vari)

Optional incapsula valori solo di classi o interfacce, quindi non possono essere tipi primitivi come interi o float. Per questo sono state definite tre classi ausiliarie
	- OptionalInt
	- OptionalLong
	- OptionalDouble
per i tre tipi primitivi più usati. I metodi per prendere il valore all'interno sono 'getAsInt', 'getAs...'.



STRUTTURE DATI
I principali e presenti più o meno in tutti i linguaggi sono le collezioni, le liste, i set, le mappe e gli iteratori. Tutte possono essere IMMUTABILI o MODIFICABILI.
Ovviamente NON possono avere come tipo un tipo primitivo, ma solo oggetti. In java le strutture dati nel front-end sono delle interfacce, poi si vanno a specificare
in varie classi che implementano in maniera vera e propria il codice.

Interfaccia Iterable<T>:
	introduce l'idea di qualcosa di iterabile, su cui posso ciclare con il for each. E' la struttura esterna di ogni struttura dati.

Interfaccia Collection<T>:
	l'interfaccia è ancora molto generale, aggiunge solo alcuni metodi che andranno in tutte le classi e strutture dati sottostanti. I metodi sono:
		- of (metodo factory che genera una struttura dati IMMODIFICABILE, esempio: List.of("Bologna", "Modena", "Parma"))
		- add
		- remove
		- contains
		- isEmpty
		- size
		- toArray
		- equals
	sono ancora tutti metodi molto semplici e intuibili.

Interfaccia Set<T>:
	introduce l'idea di un insieme di elemtni privo di duplicati, quindi mette dei vincoli ai metodi 'add' e 'equals' (due set sono uguali quando tutti gli elementi
	presenti in uno sono anche presenti in un altro).

Interfaccia SortedSet<T>:
	gli elementi all'interno devono essere tutti ordinati. Ovviamente per ottenere questo gli elementi all'interno devono essere Comparable<T> oppure devo fornire un
	Comparator<T>.
	Inoltre ci sono dei nuovi metodi: 'first' 'last' 'headSet' 'subSet' 'tailSet' (gli ultimi 3 restituiscono i sottoinsiemi ordinati contenenti gli elementi minori,
	compresi o maggiori di quello/i dato/i).

Interfaccia List<T>:
	come quella del C, l'add aggiunge un elemento in fondo alla lista e l'equals è vera se gli elementi corrispondono a due a due. Inoltre compare il metodo get
	dato che si può accedere alla lista anche per posizione (cambiano infatti anche i metodi add e remove).

Interfaccia Queue<T> e Deque<T>:
	inutili, se le useremo pace

Interfaccia Map<K, V>:
	non è una collection, ma una struttura bidimensionale, una tabella di elementi che vengono associati ognuno ad una chiave univoca. I metodi nuovi sono:
		- 'put' che inserisce una nuova coppia (chiave, elemento) nella mappa
		- 'get' che fa accedere ad un elemento in tabella data la chiave
		- 'containsKey' verifica che una chiave sia presente nella tabella
		- 'containsValue' verifica se un elemento è presente
	poiché la mappa funzioni però dobbiamo fare in modo che la funzione hash produca valori distinti per elementi distinti, quindi se ridefiniamo equals, dobbiamo
	anche ridefinire hascode in modo coerente (lo fa eclipse).
	ESEMPIO DI FUNZIONE HASHCODE PER UNA CLASSE CON DUE STRINGHE:
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + ((email==null) ? 0 : email.hashCode());
			result = prime * result + (int) (id ^ (id >>> 32));
			result = prime * result + ((name==null) ? 0 : name.hashCode());
			return result;
		}
	
	non essendo una collection ci sono anche dei metodi per estrarre i dati sottoforma di collection views:
		- 'keySet' che restituisce tutta la colonna delle chiavi (sottoforma di set)
		- 'values' che restituisce tutta la colonna dei valori (sottoforma di collection)
		- 'entrySet' che restituisce tutte le righe (sottoforma di set di entry.)

Interfaccia SortedMap<K, V>:
	uguale a SortedSet, mette le chiavi in ordine e devono essere comparable.


Libreria Collections: ha funzioni statiche per operare sulle collezioni, in particolare 'sort' e 'binarySearch' sono i più usati


CERCARE PER INDICE IN UN SET 

private SortedSet<Contact> contactSet;

public Optional<Contact> getContact(int index) {
		List<Contact> list = new ArrayList<Contact>(contactSet);
		if (index < list.size()&& index>=0)
			return Optional.of(list.get(index));
		/* SOLUZIONE ALTERNATIVA
		int = 0;
		for (Contact contact : contactSet) {
			if (i == index)
				return contact;
			i++;
		}*/
		return Optional.empty();
	}

QUALI USARE?

	− Regole generali per Set e Map
		se serve l'ordinamento, necessariamente TreeMap e TreeSet
			che implementano le sotto-interfacce SortedMap e SortedSet
		altrimenti, HashMap e HashSet sono nettamente più efficienti
			(tempo di esecuzione costante anziché log(N))
	− Regole generali per List
		di norma meglio ArrayList, che ha tempo di accesso costante
			(anziché lineare con la posizione) perché è realizzata su array
		preferire invece LinkedList se l'operazione più frequente è l'aggiunta
			in testa o l'eliminazione di elementi in mezzo alla lista.
	− Implementazioni specifiche per Set e Map:
		se serve un ordine precidibile di iterazione,
			LinkedHashMap e LinkedHashSet
		caso particolare: se gli elementi del set o le chiavi della mappa sono
			enumerativi, utile scegliere EnumMap ed EnumSet



ECCEZIONI
sono allarmi programmati lanciati da un'operazione quando si verifica una situazione anomala, l'allarme viene poi gestito.
si usa:
	try { // operazione critica } 
	catch (tipoEccezione e) {// in caso di problemi thir new ...exception..
			//si continua qui}
	// se tutto va bene
	// si prosegue qui

possono esserci anche più blocchi catch con eccezioni diverse
si usa try {} catch (eccezione e) {}. possono esserci più catch

	− 'IllegalArgumentException' per argomenti «non validi»
	− 'NullPointerException' per argomenti null
	− 'IndexOutOfBoundsException' per indici fuori range
	− 'NoSuchElementException' per elementi inesistenti
	− 'UnsupportedOperationException' per operazioni non supportate (es. metodi non ancora implementati)
	− 'ArithmeticException' per divisioni per zero e casi analoghi
	− 'ClassCastException' per tentativi di cast incoerenti

Esempio:
class Esempio1 {
	public static void main(String[] args){
 		try { FileReader f = new FileReader(args[0]); }
 		catch(FileNotFoundException e){
 			System.err.println("File " + args[0] + " not found");
 			System.exit(1); // esce con indicazione d'errore
 		}
	}
}
	

per nuove eccezioni creo una classe che estende 'IllegalArgumentException' o l'errore che voglio andare a modificare e creo i due costruttori, uno senza nulla per il messaggio semplice,
uno con una stringa per l'errore con un messaggio personalizzato (usa super() e super(s))

nel caso in cui non voglia gestire subito un errore, posso andare a rilanciare l'errore alla classe superiore o al prossimo utilizzatore del codice. In questo caso non vado
a scrivere try e catch, ma all'inizio per esempio del metodo scrivo 'throws Errore' così l'utente esterno sa che il metodo o la classe che sto scrivendo potrebbe andare a creare
un errore, ma io non lo risolvo subito.

Posso poi andare ad accorpare eccezioni fisiche e logiche, per questa roba studia da diapositiva 80. (TODO)



PERSISTENZA E IN PARTICOLARE SPLIT
	Alcune notazioni di uso comune
		– \\s uno spazio o assimilato (tab, etc.)
		– \\t una tabulazione
		– \\d una cifra numerica (\\D non cifra numerica)
		– \\w un carattere non bianco
	Da combinare con:
		– ^… negazione (il contrario di ciò che segue)
		– …* zero o più
		– …+ uno o più
		– (…) raggruppamento
ESEMPI
	\\s+ uno o più spazi (e assimilati)
	\\t+ uno o più tab
	\\d+ uno o più cifre
	\\w+ uno o più caratteri non bianchi
ESEMPIO VERO
	String[] parts = text.split("\\s+");





COMPARATORI

esempio:
	List<Person> people = new ArrayList<>();
        people.add(new Person("Alice", 30));
        people.add(new Person("Bob", 25));
        people.add(new Person("Charlie", 35));

        // Ordinare per età usando una lambda expression
        people.sort((p1, p2) -> Integer.compare(p1.age, p2.age));
        System.out.println("Ordinato per età: " + people);

        // Ordinare per nome usando una lambda expression
        people.sort((p1, p2) -> p1.name.compareTo(p2.name));
        System.out.println("Ordinato per nome: " + people);

Comparator.comparing:
	List<Person> people = new ArrayList<>();
        people.add(new Person("Alice", 30));
        people.add(new Person("Bob", 25));
        people.add(new Person("Charlie", 35));

        // Ordinare per età usando Comparator.comparing
        people.sort(Comparator.comparing(p -> p.age));
        System.out.println("Ordinato per età: " + people);

        // Ordinare per nome usando Comparator.comparing
        people.sort(Comparator.comparing(p -> p.name));
        System.out.println("Ordinato per nome: " + people);

o meglio ancora
	List<Person> people = new ArrayList<>();
        people.add(new Person("Alice", 30));
        people.add(new Person("Bob", 25));
        people.add(new Person("Charlie", 35));

        // Ordinare per età usando Comparator.comparing
        people.sort(Comparator.comparing(Persona::getAge));
        System.out.println("Ordinato per età: " + people);

        // Ordinare per nome usando Comparator.comparing
        people.sort(Comparator.comparing(Persona::getName));
        System.out.println("Ordinato per nome: " + people);

Per usare le liste per esempio nei TreeSet mi basta che nel momento in cui inizializzo il TreeSet invece di mettere la parentesi vuota
	var set = new TreeSet<>();
ci  metto il comparatore
	var set = new TreeSet<>(comparator);
e ovviamente posso fare una porcata come quella su
	var persone = new TreeSet<Persona>(Comparator.comparing(Persona::getAge)); //qui sei il re di qualsiasi cosa




JAVAFX
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.stage.Stage;

Come è organizzato:
	1. Stage (palcoscenico) (la finestra vera e propria, se cambio i pixel, cambia la grandezza dell'applicazione a schermo)
	2. Scene (scena) (sfondo per i vari pannelli)
	3. Pane (pannello)
	4. Altri elementi come Canvas (disegnare direttamente pixel), Image (immagini) o anche altri pannelli

La classe di javafx estende Application. E' sempre da creare il metodo 'start' che deve creare lo Stage.
Sempre da mettere 'stage.setTitle("bla")' e 'stage.show()' e anche un main (anche se non per forza necessario se faccio un javafx project ma evitiamo :)):
	public static void main(String[] args) {
		launch(args);
	}

Agendo sullo STAGE andiamo a cambiare tutte le proprietà della finestra vera e propria: possiamo cambiarne la grandezza, la posizione e il titolo.
Per mettere sullo stage una scena si scrive:
	stage.setScene(scene);

La SCENE invece è soltanto una specie di contenitore di tutti i vari pannelli che contiene. Ha uno sfondo e spessissimo viene semplicemente creata e utilizzata come supporto dei
pannelli. Ha infatti un costruttore che accetta un pannello, le sue grandezze e se voglio un colore (Color.YELLOW...):
	Scene scene = new Scene(panel, dimensioneXSeVoglio, dimensioneYSeVoglio, coloreSeVoglio);

I PANE sono i singoli componenti che vanno a formare l'applicazione. Possono essere per esempio un testo, un'immagine, un media player, ...
Ci sono vari tipi di pannelli, quello più usato solitamente è il FlowPane. Il costruttore è:
	FlowPane panel = new FlowPane()

Se voglio aggiungere un elemento ad un pannello, devo aggiungerlo alla sua lista di figli scrivendo per esempio:
	panel.getChildren().add(canvas);
mentre per creare per esempio un canvas devo scrivere:
	Canvas canvas = new Canvas(528, 448);

PANNELLI

Tutte le applicazioni javafx sono applicazioni fatte a nodi. Il pannello che viene inserito nella scena è il nodo radice, ogni altro componente aggiunto è un nodo figlio.
Il pannello principale ha vari layout diversi (non si usano le coordinate assolute perché dispositivi diversi con risoluzioni diverse potrebbero vedere gli oggetti in modo errato)
	HBox -> tutto orizzontale
	VBox -> tutto verticale
	FlowPane -> da sinistra verso destra POI dall'alto verso il basso
	BorderPane -> ha una parte in alto, in basso, a sinistra, a destra e al centro
	StackPane -> un oggetto sopra all'altro




CONTROLLI
Ce ne sono moltissimi:
	
COMPONENTI PASSIVI (che non generano eventi, sono solo grafici):	
	
	LABEL
	è un testo (traduzione = etichetta), viene inizializzato come 'Label l1 = new Label("Etichetta 1");' e possiamo modificare alcune cose come il font, lo stile e la grandezza
	'l1.setFont(Font.font("Times New Roman", FontPosture.ITALIC, 18));'
	ovviamente dopo va aggiunto al pannello come figlio con 'panel.getChildren().add(l1);' (in realtà no, funziona così sono con il flowpane, per alcuni altri ci sono metodi
																specifici, come 'setCentre()' di BorderPane)
	
	IMAGEVIEW
	semplicemente un'immagine, può essere presa da file, ma anche metodi per prenderla da url o altro. Il costruttore è:
		'new ImageView(new Image("alberi.jpg", 400, 300, true, false));' in cui true e false sono assolutamente inutili, infatti c'è anche il costruttore con niente dentro
	tranne il nome dell'immagine e prende in automatico la risoluzione.
	



	COMPONENTI CHE POSSONO ESSERE SIA ATTIVI CHE PASSIVI:
	
	TEXTFIELD
	immissione di testo a riga singola. Ha dei metodi di base per pilotare la stampa e l'input dell'utente:
		'setText'
		'getText'
		'setEditable'
		'setPrefColumnCount' (imposta la grandezza preferita dell'area di testo in termini di colonne)
		'setTooltip' per mettere un consiglio quando ci si passa sopra col mouse (funziona con tutti i bottoni e tasti vari, non solo textfield)
	genera eventi se si preme INVIO sulla tastiera


	PASSWORDFIELD
	uguale a textfield solo che non fa vedere i caratteri


	TEXTAREA
	immisione di testo su più righe. Ha dei metodi di base come il precedente:
		'appendText'
		'setPrefColumnCount' (imposta la grandezza preferita dell'area di testo in termini di colonne)
		'setEditable'
		
	genera eventi se cambia il contenuto dell'area di testo




COMPONENTI ATTIVI E GESTIONE DEGLI EVENTI:
	ci sono moltissimi tipi di oggetti che creano eventi di molti tipi diversi. Ogni oggetto crea un evento che descrive ciò che è accaduto. Per esempio un bottone genera
	l'evento "azione", una lista di voci quello "item selezionato" ed un campo di testo l'evento "azione" ed altri eventi solo quando viene premuto INVIO. Infatti gli oggetti
	possono creare anche più eventi allo stesso momento, che descrivono cose diverse che sono accadute.


	BUTTON
	ogni volta che viene cliccato crea un'istanza di ActionEvent, a cui va associato un ascoltatore per intercettare questo evento.
	L'ascoltatore deve:
		essere del giusto tipo
		implementare l'interfaccia 'EventHandler<ActionEvent>' che dichiara il metodo 'void handle(ActionEvent ev)'
	L'ascoltatore può essere ogni classe che voglio, ma spesso è una classe anonima o una lambda. Ovviamnte se voglio metterlo in una classe diversa devo passare alla classe
	anche passargli il label da modificare, poiché non ne ha accesso

	Per costruire il bottone si usa:

		CLASSE STESSA
		'Button b = new Button("Tizio/Caio");' e per gestire l'evento, scrivo
		'b.setOnAction(ClasseInCuiE'IlMetodoHandle);' (se il metodo handle è nella stessa classe del setOnAction scrivo 'b.setOnAction(this);')

		CLASSE ESTERNA
		Button b = new Button("Tizio/Caio");
		b.setOnAction(new Es8bisListener(l)); -> gli passo anche 'l' che è il label dato che non ne ha accesso

		LAMBDA EXPRESSION
		Button b = new Button("Tizio/Caio");
		b.setOnAction(this::myHandle); -> devo comunque implementare il metodo myHandle, ma non è più in un'interfaccia e non è più nella stessa classe, in realtà il
						  compilatore crea una classe anonima con dentro la funzione. Ascoltatore esterno e non interno come sembra

		LAMBDA EXPRESSION IN LOCO
		Button b = new Button("Tizio/Caio");
		b.setOnAction(event -> l.setText(l.getText().equals("Tizio") ? "Caio" : "Tizio"));

	
	COMBOBOX
	widget che premette di scegliere tra un elenco di elementi da una lista pop-up. Può essere anche editabile e aggiungere nuove opzioni alla lista.
	Va inizializzato ed è tipizzato, quindi si scrive:
		'ComboBox<String> cb = new ComboBox<>();'
	mentre per decidere gli elementi da mettere all'interno della lista gli passo solitamente un array di oggetti del tipo del combobox oppure glieli scrivo direttamente:
		cb.setItems(FXCollections.observableArrayList("Rosso","Giallo","Verde", "Blu"));
				  |> metodo factory apposta
	anche questo ogni volta che viene cambiata l'opzione della combobox con la funzione 'setOnAction' manda un evento che fa quello che vogliamo noi
	Per prendere il valore attuale si usa il metodo '.getValue()'

	DATEPICKER
	calendario. Di default si mette sulla data corrente, ma possiamo forzarlo a centrarsi in un'altra data a nostro piacimento.
	Metodi principali:
		'getValue' restituisce un LocalDate ed è quello che attualmente è selezionato dall'utente
		'setValue' con un LocalDate posso mettere il calendario dove voglio


	COLORPICKER
	semplicemente per scegliere un colore, non posso fargli nient'altro. Metodi
		'getValue().getRed()' per il valore del rosso
		'getValue().getGreen()' per il valore del verde
		'getValue().getBlue()' per il valore del blu


	SLIDER
	barra di regolazione, tipo quella del volume. Regolazioni:
		limiti max e min
		mettere una graduazione nella scala
		major tick units e minor tick units
		orientazione (orizzontale o verticale)

	il costruttore è:
		'slider = new Slider(0,10,5);' in cui i valori sono min, max e la posizione iniziale del cursore
	il listener va aggiunto in '.valueProperty()', per esempio:
		'slider.valueProperty().addListener( (changed, oldval, newval) ->
			System.out.println("Valore corrente: " + formatter.format(newval) + ", valore passato: " + formatter.format(oldval)));
	
	per configurarla ci sono molti metodi:
		'slider.setShowTickMarks(true);' -> fa vedere i tick
		'slider.setShowTickLabels(true);' -> fa vedere i numeri sotto ai tick
		'slider.setMajorTickUnit(1);' -> i tick sono ogni 1 unità
		(queste prime 3 sono solitamente insieme)
		'slider.setMinorTickCount(1);' -> i tick più piccoli sono ogni unità
		'slider.setBlockIncrement(1);' -> se uso le freccette mi sposto di 1 unità
		'slider.setSnapToTicks(true);' -> forza il cursore a stare sui tick
		'slider.setOrientation(Orientation.VERTICAL);' -> verticale



	SPINNER
	sceglie da una lista con le freccette solitamente in su e giù entro dei limiti già decisi
		i valori possono essere tutti quelli che vuoi (interi, reali, liste o user-defined)
		c'è una factory per produrre i valori
		listener va messo sulla proprietà 'valueProperty'

	il costruttore è:
		'Spinner<Integer> spinner = new Spinner (0, 10, 5);' -> uguale a Slider
	se vuoi uno spinner con delle frecce precise, metto:
		'spinner.getStyleClass().add(Spinner.STYLE_CLASS_ARROWS_ON_RIGHT_HORIZONTAL);'
	il listener invece va messo:
		spinner.valueProperty().addListener( (changed, oldval, newval) ->
			txt1.setText("Valore corrente: " + formatter.format(newval) + " (era: " + formatter.format(oldval) + ")")



	PROGRESSBAR
	dispositivo (solitamente) di output che indica a che punto siamo arrivati in un determinato processo
	il costruttore è:
		'ProgressBar bar = new ProgressBar(0.25);'
	e per cambiare il numero si scrive:
		'bar.setProgress(0.456);'
	Il cambio di numero sia da input che da output scatena un evento che si prende:
		'bar.progressProperty().addListener( (changed, oldval, newval) ->
			txt1.setText("Valore corrente: " + formatter.format(newval) + " (era: " + formatter.format(oldval) + ")")');'

	PROGRESSINDICATOR
	uguale identico a ProgressBar ma fa vedere l'andamento in un grafico a torta
	
	
	
	FILECHOOSER
	è un dialogo. Solitamente si fa comparire dopo aver premuto un bottone. Si usa sia per aprire che per salvare file.
	Il costruttore è:
		FileChooser chooser = new FileChooser();
	Posso mettergli un titolo:
		'chooser.setTitle("Apri file");'
	e per la funzionalità vera e propria di aprire/salvare file si scrive:
		'File selectedFile = chooser.showOpenDialog(stage);' -> per aprire file
		'File selectedFile = chooser.showSaveDialog(stage);' -> per salvare file
		
	Si possono filtrare anche i file per tipo:
		'chooser.getExtensionFilters().addAll(
			new ExtensionFilter("Text Files", "*.txt"),
			new ExtensionFilter("Image Files", "*.png", "*.jpg", "*.gif"),
			new ExtensionFilter("Audio Files", "*.wav", "*.mp3", "*.aac"),
			new ExtensionFilter("All Files", "*.*"));'
	e posso decidere anche se volere selezioni multiple di file:
		'List<File> selectedFiles = chooser.showOpenMultipleDialog(stage);'
			(invece di 'File selectedFile = chooser.showOpenDialog(stage);')
	
	ATTENZIONE: SE L'UTENTE PREME ANNULLA IL FILECHOOSER RESTITUISCE 'null'
	
	
	
	
	TOGGLE
	tasto che è attivato o disattivato (come un interruttore per la luce). Genera eventi sia quando si attiva che disattiva.
	C'è il classico costruttore
		'ToggleButton tg1 = new ToggleButton("Toggle");'
	e per capire nella lambda expression se è selezionato oppure no si scrive
		'tg1.isSelected()' che retituisce vero se è selezionato e falso se non lo è.
	
	
	CHECKBOX
	molto simile al toggle, solo che rappresenta un quadrato con un tick e ne posso mettere più di uno insieme.
	Se ce ne è solo uno si comporta ugualmente al Toggle, con gli stessi metodi
	Se invece ci sono più di un CheckBox possiamo fare in vari modi:
		1. (due listener impliciti nelle lambda expression) oltre all'evento classico si mette una funzione da implementare chiamata
		'myAuxHandler()' o altro che gestisce tutti i casi, compreso quello in cui tutti e due sono selezionati. Ovviamente per fare
		in modo che la funzione 'myAuxHandler()' possa accede allo stato dei CheckBox con il metodo '.isSelected()', i CheckBox
		devono essere nella stessa classe come dei dati private, non dichiarati solo nel main
		2. posso utilizzare un listener unico 'myHandle' che capendo da chi è arrivato l'evento con il metodo '.getSource' anche se
		questo non si usa molto a causa del metodo '.getSource' che ha bisogno del nome della variabile da cui è arrivato l'evento
		e in causa del cambiamento del nome della variabile va cambiato anche qui.


	RADIOBUTTON
	uguale al CheckBox ma posso scegliere un'opzione alla volta (mutualmente esclusiva) (immagina la scelta del sesso M o F)
	per gestire più RadioButton posso
		1. gestire i pulsanti singolarmente (non si fa)
		2. ToggleGroup (usa questo)
	per utilizzare il ToggleGroup devo inanzitutto creare i RadioButton con il classico costruttore:
		'b1 = new RadioButton("Pere");'
		'b2 = new RadioButton("Mele");'
	poi creo il ToggleGroup sempre con il suo costruttore:
		'tg = new ToggleGroup();'
	e ci aggiungo i vari RadioButton:
		'b1.setToggleGroup(tg);'
		'b2.setToggleGroup(tg);'
	poi uso il metodo '.selectedToggleProperty()' sul ToggleGroup e ci aggancio il listener con la lambda expression da svolgere ad ogni evento
		'tg.selectedToggleProperty().addListener((changed, oldval, newval) ->
			txt1.setText("Opzione corrente: " + ((RadioButton)newval).getText()));'
	
	
	
	LISTVIEW
	lista con scrollbar che fa scegliere un'opzione dall'elenco (di default selezione singola, ma posso anche fare quella multipla)
	Quando una voce viene scelta, nel model associato viene modificata la proprietà 'selectedItemProperty'.
	La lista è tipizzata, quindi il costruttore è:
		'ListView<String> listview = new ListView<>();'
	e per popolare la ListView si usano i metodi factory di FXCollections:
		'listview.setItems(FXCollections.observableArrayList("Rosso", "Giallo", "Verde", "Blu"));'
	inoltre di default mostra 10 item, molto brutto, quindi:
		'listview.setPrefHeight(listview.getItems().size()*24+ 2);' -> altezza
		'listview.setPrefWidth(72);' -> larghezza
	poi per gestire l'evento:
		'listview.getSelectionModel().selectedItemProperty().addListener((obj, oldval, newval) -> txt1.setText("Opzione corrente: " + newval) );'
	(il metodo che gestisce l'evento è 'ChangeListener' che qui viene implementato come lambda expression)
	SELEZIONE MULTIPLA:
	prima definisco la ListView come lista con selezione multipla:
		'listview.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);'
	poi per la gestione degli eventi si usa un for each che passa su listview.getSelectionModel().getSelectedItems():
		listview.getSelectionModel().selectedItemProperty().addListener(
			(obj, oldval, newval) -> {
				StringBuilder sb = new StringBuilder();
				for(String item : listview.getSelectionModel().getSelectedItems())
					sb.append(item+", ");
					txt1.setText("Opzione corrente: " + sb) ;
			}
		);
	MODIFICA ELEMENTI
	posso inoltre andare ad aggiungere o rimuovere elementi dalla lista agendo su .getItems:
		'ba.setOnAction(e -> listview.getItems().add(txt2.getText()));' -> aggiunta (non controlla i duplicati)
		'br.setOnAction(e -> listview.getItems().remove(txt2.getText()));' -> rimozione
		
	
	
	CHOICEBOX
	uguale a ListView, ma gli elementi sono a pop-up e non permanenti. (tipo mastermind)




GRAFICI DA DIAPOSITIVA 120 (speriamo che non ci siano)



STREAM
1. crea lo stream
2. operazioni sullo stream di oggetti
3. conversione per andare ad utilizzare gli oggetti

1. CREAZIONE
	– dal metodo stream() invocato su qualsiasi collection
	– dal factory method Stream.of(array) nel caso di array
	– da altri factory methods di altre classi (es. Random)
	- per i tipi primitivi ci sono stream propri: IntStream st = IntStream.of(valori);
	
	posso creare anche stream infiniti con i metodi .generate o .iterate come:
		Stream<Double> s = Stream.generate(Math::random);
		Stream<Integer> pari = Stream.iterate(2, n->n+2);

2. OPERAZIONI SULLO STREAM
	per esempio filtraggi, separazioni, modifiche, tutte fatte solitamente con lambda expression, per esempio per filtrare:
		
		ESEMPIO FILTRAGGIO PER STRINGHE PIU LUNGHE DI 8 (.filter)
		Stream<String> st = elencoParole.stream();
		long n = st.filter(p -> p.length() > 8 ).*riduzione*;
		
		ESEMPIO MODIFICA (.map)
		Stream<String> st = elencoParole.stream();
		List<String> paroleMaiuscole= st.map( p->p.toUpperCase() ).*riduzione*;
		
	trasformazioni più usate:
		– filter(Predicate):
			filtra nel nuovo stream-risultato solo gli elementi dello stream che soddisfano la condizione, ossia solo quelli
			per cui il predicato è vero
		– map(Function) [e variante mapToObj(Function)]:
			applica a ogni elemento x dello stream la funzione data: y = f(x), producendo un nuovo stream con i rispettivi
			risultati y (di tipo diverso dal primo). La variante mapToObj si usa per operare su stream di tipi primitivi,
			producendo come risultato un nuovo stream di tipi-oggetto.
		– flatMap(Function):
			se la funzione Function produce come risultato uno stream (non un singolo elemento), la trasformazione
			map darebbe come risultato uno stream di stream: flatMap li unisce in un unico stream, «appiattendo» il risultato
		–limit(n):
			lascia passare solo i primi n elementi (gli altri li butta) -> cruciale per limitare gli stream potenzialmente infiniti
		–skip(n):
			fa l’opposto, esclude i primi n elementi, fa passare gli altri


3. SINTETIZZAZIONE
	possono:
		- limitarsi ad accumulare e mettere da un'altra parte (.collect)
		- elaborare questi dati e dare un risultato
		
		ESEMPIO ACCUMULARE
		long n = st.filter( p->p.length()>8 ).count();
		List<String> paroleMaiuscole=st.map( p->p.toUpperCase() ).collect(Collectors.toList());
		
		se voglio fare accumulare in un array, invece di usare .collect, devo fare diretto .toArray con dentro la lambda del costruttore new:
		ESEMPIO ACCUMULARE SU ARRAY
		String[] nomi = st.map(Persona::nome).toArray(String[]::new);
		oppure con tipi base:
		int[] result = st.filter(x -> x>0).toArray(); // riduttore senza constructor interference, fa tutto in automatico

	riduzioni più usate:
		–count, min, max, average:
			collettori che operano sugli elementi senza accumularli: rispettivamente conta gli elementi, trova il min, il max, la media… etc.
		–collect(collector):
			è il riduttore-accumulatore, che accumula gli elementi in un collettore (tipicamente, un array o una collection)
		–reduce(function):
			è il riduttore general-purpose, che applica a ogni elemento dello stream la funzione data: è tale funzione che specifica cosa
			fare del risultato [disponibile in due varianti]
		–forEach(operation):
			riduttore che effettua un’iterazione interna, ripetendo l’operazione data su tutti gli elementi dello stream
		–toList, toSet, toMap(fk,fv)
		–toCollection(constructorRef):
			Questo è il collettore più generale, che può accumulare in una qualsiasi collection, anche se per essa non esiste il collettore specifico
			(caso d’uso tipico: per accumulare in un TreeSet o TreeMap)
			ESEMPIO
			Per accumulare in un TreeSet (concretizzazione di SortedSet), si può scrivere toCollection(TreeSet::new)
		–groupingBy(criterio), partitioningBy(criterio):
			riuniscono gli elementi "a gruppi" secondo il criterio dato; il risultato è una mappa con tante entry quanti i gruppi, e per ogni riga
			la lista degli elementi dello stesso gruppo (esistono varianti per altre collection)
		–summarizingXX, summingXX, averagingXX (XX = Int, Long, Double):
			anche questi riuniscono gli elementi "a gruppi", ma il criterio «è nel nome» del collettore: il risultato è una mappa con tante entry
			quanti i gruppi e come valore il risultato (somma, media, etc.) del gruppo

DA 49 STREAM DI TIPI PRIMITIVI







--appunti fede finiti qua per ora, dice di studiare da diapositiva 80 per eccezioni fisiche e logiche--



//to be continued



--cose che metto perche magari mi sveglio storto e le scordo (o anche solo per averle gia pronte)--
LA FAMIGERATA FRACTIONCOLLACTION CON METODI PUT E REMOVE
public class FractionCollection {
	private static final int DEFAULT_PHYSICAL_SIZE = 10;
	private static final int DEFAULT_GROWTH_FACTOR = 2;
	
	private Frazione[] innerContainer;
	private int size;
	
	public FractionCollection(Frazione[] collection) {
		innerContainer = new Frazione[collection.length];
		size=0;
		for (int i = 0; i < collection.length; ++i) {
			
			if (collection[i] != null) {
				innerContainer[size] = collection[i];
				size++; 
				}
			}
	}
	
	public FractionCollection(int physicalSize) {
		innerContainer = new Frazione[physicalSize];
		size = 0;
	}
	
	public FractionCollection() {
		this(DEFAULT_PHYSICAL_SIZE);
	}

	public void put(Frazione f) {
		if (innerContainer.length == size) {
			Frazione[] newContainer = new Frazione[size * DEFAULT_GROWTH_FACTOR];
			for (int i = 0; i < innerContainer.length; i++) {
				newContainer[i] = innerContainer[i];
			}
			innerContainer = newContainer;
		}
		innerContainer[size++] = f;
	}
	
	public void remove(int index) {
		if (index < 0 || index >= size)
			return;
		
		for (int i = index; i < size - 1; i++) {
			innerContainer[i] = innerContainer[i+1];
		}
		size--;
	}
}




CrossWord= matrici, try sulla persistenza con parseInt, alfabeto su mainPane

DentBurger= persistenza con prezzi, formattatore data/ora, mappe di mappe di liste/collection, 
        comboBox inizializate-impegnative

GringottBank= calcoli tra int, double e enum in model, persistenza da String a enum, split impegnativi, 
        toggleButton, comboBox e alert

SpeedCollage= metodi statici gia dati, persistenza impegnativa, tanti split particolari, tanti try-catch,
        date picker

CityParking= algebra degli orari, peristenza con prezzi, controller che gestisce stringe-LocaldateTime,
        ui data e ora correnti, ui alert

TaxComparator= formattatore di "1.234,56" -> new DecimalFormat("¤ #,##0.##"), StringBuilder in mezzo le 
        palle su model, persistenza con formattatore NumberFormat 1.234, formatter anche in ui

Agenda= sortedSet

Oroscopi= set

Meteo: classe formatters, model con stream(), persistenza con formatters data ora, SortedSet con comparator
        sulla persistenza, set su popola combo

SpeseSanitarie = stream semplice di somma e collezione su model.AnalizzatoreSpese e model.DocumentoDiSpesa

TrainStatistics= Uso e controllo degli optional in model.Recording, Stream.avarenge() in model.AvarengeStatProvider
        Lista di optional su persistenza bo cazzo ne so, SLIDER IN UI


SLIDE 57 DI STREAM CI STANNO GLI ESEMPI

RICORDA CHE ESISTE LA CLASSE MATH (tipo math.round approssima fra)

Stream:
    Avarenge() fa la media
    mapTo..() cambia il tipo di dato
    map() lo modifica
    ES:
    //Utilizzo di map() per raddoppiare ogni numero
        int[] numeriDoppi = IntStream.of(numeri)
                                     .map(n -> n * 2)
                                     .toArray();




cose da ricordare
1. metti sempre le variabili nei messaggi di errore, troubleshooting molto più semplice
2. controllo null sempre prima dell'isEmpty, sennò viene lanciato NullPointerException
3. fai sempre riga = reader.readLine() e non fare subito split, così controlli sempre se è null
4. nel confronto di double non usare == ma Math.abs(valore1 - valore2) < 0.01