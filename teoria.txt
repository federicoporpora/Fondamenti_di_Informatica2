COMPILAZIONE ED ESECUZIONE DA CMD
compilazione java:
    javac Esempio1.java       (produce Esempio1.class)
poi per farlo partire:
    java Esempio1 (args)

per distribuire i programmi, java utilizza il tipo .jar che è un file compresso ZIP che contiene al suo
interno tutto il programma (essendo diviso in classi andava trovato un altro modo)

per creare un file .jar come archivio di classi (zip):
    jar cf nomearchivio.jar classi -> è un elenco di classi da scrivere oppure un'intera da cartella.
                                      vanno separate tutte da ;
    ESEMPIO:
    jar cf nomeCheScelgoIo.jar *.class;pippo/*.class -> andrà a creare nomeCheScelgoIo.jar con le classi
                                                        .class che ho incluso

per creare un file .jar eseguibile:
    jar cmf info.txt nomeapp.jar classi -> classi esattamente come prima
    info.txt è un file che contiene la riga:
        Main-Class: NomeclasseMain -> seguita da una riga vuota INDISPENSABILE

TIPI PRIMITIVI
per conversione di tipi primitivi in java si usa il CAST:
    float f = (float) 3.54;     oppure     float f = 3.54F; -> ques'ultimo non è cast ma direttamente
                                                               l'input giusto

i caratteri in java ovviamente non seguono più la tabella ASCII che ha pochissimi caratteri,
ma UTF-8, UTF-16 e UTF-32






Date
Per tutte le cose che hanno a che fare con il tempo si importa la libreria java.time.*

Questa libreria non utilizza il termine 'new', ma ha un costruttore proprio che è '.of'.
Per esempio si scrive:
    LocalDate natale = LocalDate.of(2020, 12, 25);
Oppure per mesi e giorni della settimana (ENUM) si scrive:
    Month mese = Month.of(10) --> OCTOBER
    DayOfWeek giorno = DayOfWeek.of(2) --> TUESDAY
Oppure per orari locali:
    LocalTime mezzogiorno = LocalTime.of(12, 00)

I vari concetti sono:
    locali:
        LocalDate
        LocalTime
        LocalDateTime
        Period --> durata relativa
    assoluti:
        Instant
        Duration
        OffsetDateTime --> data assoluta sulla linea del tempo espressa come data + orario + delta rispetto a Greenwich (UTC)
        ZonedDateTime --> data assoluta sulla linea del tempo espressa come data + orario + delta rispetto a Greenwich (UTC)

GIORNI E MESI
I due enumerativi per giorni e mesi:
    Month
    DayOfWeek
Entrambi hanno un getValue che dall'enum restituiscono il numero:
    Month.OCTOBER.getValue() --> 10
    DayOfWeek.MONDAY.getValue() --> 1
Oppure hanno la funzione '.of' che restituisce la costante enumerativa del numero (il contrario di prima):
    Month.of(10) --> OCTOBER
    DayOfWeek.of(1) --> MONDAY

DATE E ORARI LOCALI
    da struttura LocalDate posso ottenere i vari valori con:
        getDayOfMonth
        getMonth
        getYear
        getDayOfYear
        getDayOfWeek
        isLeapYear
        ...
    da struttura LocalTime posso utilizzare invece:
        getHour
        getMinute
        getSecond
        getNano
Posso aggiungere, sottrarre o modificare alcuni parametri con:
    per LocalDate:
        plus*:
            natale2020.plusYears(4) --> natale2024
        minus*:
            allo stesso modo
        with*:
            natale2020.withYear(2018) --> natale2018
    per LocalTime:
        stessa roba

PERIOD
Un periodo che non è però di un "luogo temporale specifico".
Posso dire infatti un periodo di un mese, ma non tutti i mesi hanno la stessa durata, quindi
fa comodo non sapere di che mese si stia parlando.

Anche in questo caso ci sono il costruttore '.of' e le varie funzioni plus, minus, between, ...
    Period p1 = Period.ofMonths(2).plusDays(3)

Per unire Period alle varie date locali o assolute, ci sono funzioni come:
    addTo:
        LocalDate d1 = (LocalDate)p1.addTo(xmas2017); --> OCCHIO AL CAST
    substractFrom:
        stessa roba

INSTANT
Praticamente inutile, ha il suo costruttore e può essere utile perché disconnesso da calendari specifici
per cultura.

Esempio per istante attuale:
    Instant adesso = Instant.now();

DURATION
La durata di tempo tra due istanti
    Duration d = Duration.between(i1,i2)

Come sempre c'è il '.of' e i vari plus, minus, with e between.

Ci sono anche metodi che possono convertire durate in anni, mesi giorni, ore, minuti, ... --> TRONCAMENTO

ORARI E DATE ASSOLUTE
guarda diapositive da 27 ppt Date



FORMATTATORI
Non in tutte le culture vengono formattati i dati in modo uguale. Java offre dei formattatori a seconda delle varie culture in alcuni database.
La libreria che rappresenta il concetto di culura locale è java.util.Locale
Ogni cultura è rappresentata con lingua con 2 minuscole e paese con due maiuscole.
	it_IT oppure en_GB
Se non si specifica nulla i formattatori adottano il default della macchina che si può vedere attraverso 'Locale.getDefault'

Esistono due grandi famiglie di formattatori:
	formattatori NUMERICI (java.text.NumberFormat)
		formattazione di numeri
		formattazione di percentuali
		formattazione di prezzi e valori di valute

		formatter.format(valore) --> il formattatore è dichiarato in NumberFormat

	formattatori per DATE e ORARI (java.time.format.DateTimeFormatter)
		formattazione di data (in 4 formati: breve, medio, lungo e full)
		formattazione di orario (in 2 formati: breve e medio)
		formattazione di una data con orario (4 x 2 formati)

		valore.format(formatter) --> il formattatore è dichiarato in LocalDate

FORMATTATORI NUMERICI
Nella classe NumberFormat ci sono 3 metodi get che fungono da factory
	Esempio:
		double x = 43.12345678, y = 0.7, z = 13456.78;
		NumberFormat fN = NumberFormat.getNumberInstance();
		NumberFormat fP = NumberFormat.getPercentInstance();
		NumberFormat fV = NumberFormat.getCurrencyInstance();
		
		fN.setMaximumFractionDigits(2); --> configurazione
		System.out.println( fN.format(x) ); --> 43,12
		System.out.println( fN.format(y) ); --> 0,7
		System.out.println( fN.format(z) ); --> 13.456,78
		
		fP.setMaximumFractionDigits(2);
		System.out.println( fP.format(x) ); --> 43,12%
		System.out.println( fP.format(y) ); --> 70%
		System.out.println( fP.format(z) ); --> 123,46%

		System.out.println( fV.format(z) ); --> 1.243,57 € (fino a Java 8 il simbolo dell'euro era prima del valore, quindi occhio a retrocompatibilità)

I formattatori numerici supportano anche il parsing, che converte una stringa numerica in un tipo Number, che può essere utilizzato come double, float o int a piacere.
Deve ovviamente essere correttamente formattata secondo le regole di una cultura locale.
Va però saputa usare la gestione degli errori, sennò il programma non compila, quindi c'è da aspettare

FORMATTATORI PER DATE E ORARI
I metodi factory sono di nuovo gli 'of**(...)'. Invertono il pattern d'uso: dataora.format(formatter).
Ci sono 4 formati di stile per le date:
	SHORT: gg/mm/aa
	MEDIUM: gg siglamese aaaa
	LONG: gg mese aaaa
	FULL giorno gg mese aaaa
	
	Esempio:
		DateTimeFormatter formatterShort = DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT);
		DateTimeFormatter formatterMedium = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);
		DateTimeFormatter formatterLong = DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG);
		DateTimeFormatter formatterFull = DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL);
		LocalDate d = LocalDate.now();
		System.out.println(d.format(formatterShort)); --> 04/03/20
		System.out.println(d.format(formatterMedium)); --> 4 mar 2020
		System.out.println(d.format(formatterLong)); --> 4 marzo 2020
		System.out.println(d.format(formatterFull)); --> mercoledì 4 marzo 2020

Sennò formattatori personalizzati con il metodo factory 'ofPattern':
	Esempio:
		DateTimeFormatter myFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
		LocalDate d = LocalDate.now();
		System.out.println(d.format(myFormatter)); --> 04/03/2020

Il Locale se non vogliamo quello default viene passato con il metodo 'withLocale(Locale.*)'
	Esempio:
		DateTimeFormatter.ofLocalizedDate(…).withLocale(Locale.CANADA)

I formattatori per gli orari sono uguali a quelli per le date ma hanno solo due formati:
	SHORT: hh:mm
	MEDIUM: hh:mm:ss

	Esempio:
		DateTimeFormatter formatterShort = DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT);
		DateTimeFormatter formatterMedium = DateTimeFormatter.ofLocalizedTime(FormatStyle.MEDIUM);
		LocalTime t = LocalTime.now();
		System.out.println(t.format(formatterShort)); --> 18:37
		System.out.println(t.format(formatterMedium)); --> 18:37:41

Per formattatori che vogliono sia le date che l'orario si usa il metodo '.ofLocalizedDateTime(dateStyle, timeStyle)'.





RECORD

record ===> contenitori di valori.

Si inizializzano così:
record Puppa(int numero, String nome) {}

utili perché il compilatore crea in automatico il costruttore e i get. Per esempio posso usare nel caso precedente getNumero() o getNome() senza scriverlo io manualmente.

Posso anche aggiungere dei metodi personalizzati ma ATTENZIONE: i valori dei record sono IMMUTABILI, quindi non posso creare un metodo così:
record Puppa(int numero, String nome) {
	public void setNumero(int nuovoNumero) {
		this.numero = nuovoNumero;
	}
}

Il compilatore darebbe errore, non posso cambiare il valore dei dati, l'unica cosa che posso fare è creare un nuovo record che restituisco, ma è un record diverso

record Puppa(int numero, String nome) {
	public Puppa setNumero(int nuovoNumero) {
		return new Puppa(nuovoNumero, nome);
	}
}

Utile però per avere vari metodi get che ritornano magari valori modificati dei dati presenti all'interno.





CLASSI ASTRATTE

classi che possono avere dei metodi astratti che non vengono inizialmente implementati o vengono implementati con un metodo di default poiché
ogni SOTTOCLASSE avrà il suo specifico.

le classi astratte si creano così:

public class abstract Puppa {
	private int numero = 0;
	private String nome = null;

	public Puppa(int numero, String nome) {
		this.numero = numero;
		this.nome = nome;
	}

	public void metodo1() {
		bla;
		bla;
	}

	public void metodoAstratto();

	public void metodoAstratto2() {
		bla;
		bla;
		implementazione default, poi in ogni sottoclasse ci sarà un metodo chiamato nello stesso modo con @Override prima e il compilatore nel caso in cui esista;
		utilizzerà quello;
	}
}

Ogni sottoclasse dorvà essere creata specificando che estende la classe astratta, per esempio:

public class DaiCheAndiamo extends Puppa{
    private String sesso;

    public DaiCheAndiamo(int numero, String nome, String sesso) {
        super(numero, nome);
        this.sesso = sesso;
    }

    @Override
    public void metodoAstratto() {
        bla; bla;
    }

    @Override
    public void metodoAstratto2() {
        bla; bla;
    }
}

La sottoclasse DEVE avere un costruttore che inizializza tutti i dati, per inizializzare i dati della classe astratta al di sopra si utilizza la funzione super()
con i dati all'interno che indica che richiama il costruttore della classe astratta e inserisce i dati all'interno di essa.




INTERFACCE

E' una classe astratta posta all'estremo, le sottoclassi non stanno più sotto, l'interfaccia è solo una definizione che ha all'interno dei metodi pubblici
e costanti. Non può neanche avere al suo interno delle variabili, la cosa migliore che può fare è andare a definire dei metodi che ritornano delle
variabili e poi ogni sottoclasse andrà ad implementare a modo suo il codice per restituire la variabile desiderata. Per esempio se ho un'interfaccia
chiamata 'rettangolo' con i metodi 'base()' ed 'altezza()' ed una classe 'quadrato' che vuole implementare l'interfaccia 'rettangolo' (perché
effettivamente è un rettangolo particolare) dovrà andare a specificare nel suo codice i metodi base e altezza andando a prendere i dati dalla variabile
'lato', non per forza da base e altezza. Tutto questo per spiegare che posso avere delle "variabili" anche dalle interfacce.

Una classe se vuole implementare in sé l'interfaccia, deve andare ad implementare ogni metodo descritto dall'interfaccia.

Un'interfaccia si dichiara così:
	public interface Rettangolo;

Una classe, se vuole implementare un'interfaccia, scrive:
	(public) class Quadrato implements Rettangolo;
	    |
	    -> non necessariamente pubblica

Non ho ancora scritto gli APPUNTI DELLE FACTORY DELLE INTERFACCE

In java ci sono anche delle interfacce di default che servono al compilatore per capire se può eseguire determinate azioni.
Per esempio esiste l'interfaccia tipizzata 'Comparable<T>' che indica se un oggetto è comparabile con un altro oggetto dello stesso tipo e implica la
creazione del metodo 'public int compareTo(T that);'. Questo metodo serve al compilatore per eseguire moltissime azioni, ma le più importanti sono
	ORDINEMENTO
	- l'ordinamento di un array attraverso il metodo statico 'Arrays.sort'
	- l'ordinamento di una lista attraverso il metodo 'Collections.sort'
	RICERCA
	- ricerca binaria all'interno di un array attraverso il metodo statico 'Arrays.binarySearch'
	- ricerca binaria all'interno di una lista attraverso il metodo 'Collections.binarySearch'

In particolare per la comparazione all'interno del metodo statico .sort, il compilatore va a richiamare il metodo compareTo che ritorna un intero ed indica
se i due dati comparati sono uno maggiore dell'altro.
Ma questo semplice metodo non cattura ogni casistica, ci sta che a volte io voglia confrontare un campo specifico e altre volte un altro.
Per esempio se voglio confrontare più persone posso confrontarle per età, nome, cognome, ecc... ed un comparatore singolo non è abbastanza.

Per questo si introduce il concetto di COMPARATORE.
A differenza dell'interfaccia comparable, è un ente terzo che compara due oggetti, non è un metodo all'interno della classe.
In java si dichiara:
	Comparator<T>
e dichiara al suo interno un singolo metodo:
	public int compare(T a, T b);
che restituisce 1 se a > b, -1 se a < b e 0 se a == b.

Per esempio se voglio creare un comparatore per Counter, dovrò scrivere
	public class MyComparatore implements Comparator<Counter> {
		public int compare(Counter x, Counter y)
			if (x.val < y.val) return -1;
			if (x.val > y.val) return +1;
			/* else */ return 0;
		}
	}

Se volessi invece creare metodi diversi per comparare degli oggetti, mi basta creare più classi comparatore con all'interno il proprio metodo compare
e in Arrays.sort passo oltre all'array anche il comparatore che voglio utilizzare, per esempio:

	Arrays.sort(persone, new CognomeComparator() );
	System.out.println(String.join(", ", persone));
	Arrays.sort(persone, new NomeComparator() );
	System.out.println(String.join(", ", persone));
	Arrays.sort(persone, new EtaComparator() );
	System.out.println(String.join(", ", persone));

Se il comparatore viene usato una sola volta, posso andare a creare una classe anonima, cioè direttamente all'interno dell'Arrays.sort scrivo il codice
e l'implementazione della classe del comparatore con il metodo compare all'interno. Per esempio:

	Arrays.sort(persone, new Comparator<Persona>() {
		public int compare(Persona p1, Persona p2){
		return p1.getCognome().compareTo(p2.getCognome());
		}
	);


Infine ci sono le interfacce MARKER, cioè interfacce senza all'interno alcun tipo di codice, ma che servono per comunque definire un tipo ad ogni classe,
per andare ad aiutare il compilatore a scovare eventuali errori di incongruenza di tipo.

Posso quindi andare a scrivere in seguito dei metodi che accettano solo delle classi di un certo tipo, che rappresentano tutte le classi che implementano
questa interfaccia marker. Per esempio posso andare a creare un'interfaccia chiamata "StampabiliInUnaSolaRiga" che indicano tutte le classi che nel mio
ipotetico programma possono essere stampate in una sola riga e quindi posso andare a creare un metodo statico chiamato "stampaRigaSingola" che accetta solo
istanze dell'interfaccia "StampabiliInUnaSolaRiga".

	public static void stampaRigaSingola(StampabiliInUnaSolaRiga stringa) {
		System.out.println(stringa);
	}

e questo fa si che ogni classe che non implementa questa classe marker che prova ad utilizzare questo metodo vada a creare errore ed il programma non
compila.

MANCANO GLI APPUNTI DELLE INTERFACCE UNITE AGLI ENUMERATIVI




GENERICITA' E CONTROLLO DI TIPO PER ARRAY

Chiamare ogni array generico con Object, può andare a creare moltissimi problemi, poiché posso andare a metterci dentro quello che voglio, anche di tipi
diversi tra di loro. E' sempre meglio avere degli array di un tipo specifico, ma poi come faccio a fare delle funzioni che possono agire sugli array in
generale? Per esempio la funzione 'idem' che analizza due array di un tipo qualsiasi e controllano che siano uguali. Se li chiamo Object in input della
funzione potrei mandarci degli array con tipi diversi, con all'interno cose a caso, insomma non si fa.
Per risolvere questo problema c'è l'utilizzo del polimorfismo orizzontale:

per le varie funzioni si scrive:
	public static <T> boolean idem(T[] a, T[] b);

invece per la chiamata della funzione si scrive:
	<NomeDelTipoDiCuiSonoFattiGliArray>idem(array1, array2);

Insomma è meglio del resto



NULL SAFETY (OPTIONAL)

Semplicemente è brutto e non si usa il null perché porta a null pointer exeption con errori introvabili, difficili da debuggare e che si propagano velocemente in tutto
il codice rendendolo difficilmente mantenibile

Un caso da cui prendere spunto come ottima alternativa al null è il NaN che anche se non è un numero, almeno restituisce qualcosa e segue tutte le regole matematiche
del caso successivamente nel codice. NaN fa parte della classe libreria Float e Double, e si dichiara Float.NaN o Double.NaN.

Non esiste però una cosa simile per gli oggetti (nei numeri funziona solo perché non sono oggetti).

Java quindi agisce a livello di libreria andando a creare il concetto di tipo "Optional<T>". Questo tipo esprime l'idea che un oggetto possa mancare, infatti è opzionale.
Viene quindi creato un tipo che in ogni caso restituisce qualcosa. Quindi l'oggetto di tipo T che ci interessa viene restituito incapsulato all'interno
dell'oggetto-wrapper ausiliario 'optional'. Questo esiste sempre, non è mai null.

I vari metodi dell'optional sono:
	– per incapsulare un valore: Optional.of
		(c'è anche il metodo ofNullable che scrive da solo empty se l'elemento è null)
	– per esprimere il "nessun valore": Optional.empty
	– per accertare la presenza/assenza: isPresent / isEmpty
	– per estrarre il valore (se presente): get / orElse (scrivi x.orElse(y) e se x non è presente restituisce y senza if vari)

Optional incapsula valori solo di classi o interfacce, quindi non possono essere tipi primitivi come interi o float. Per questo sono state definite tre classi ausiliarie
	- OptionalInt
	- OptionalLong
	- OptionalDouble
per i tre tipi primitivi più usati. I metodi per prendere il valore all'interno sono 'getAsInt', 'getAs...'.











